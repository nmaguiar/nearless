# Author: Nuno Aguiar
help:
  text   : Reverse proxy service to scales up and down containers or pods as needed
  expects: 
  - name     : sites
    desc     : A SLON/JSON array composed of 'name', 'source' (host), 'target' (service:port), 'type'
    example  : "[(name: wiki, source: wiki.com, target: 'wiki:80', type: wikipedia)|(name: chat, source: chat.com, target: [(path: /, to: 'chat:80')|(path: /keycloak, to: 'sso:80', rewrite: true)])]"
    mandatory: true

todo:
- Prepare scheduled trigger
- (httpdStart  ): 7777
- (httpdService): 7777
  ((uri       )): /
  ((execURI   )): | 
    var res, _res
    try {
      // Determine source host
      var _host = String(request.header.host).toLowerCase()
      var _data = $ch("sites").get({ source: _host })
      request._host = _host

      // Determine if source has type
      if (isDef(_data) && isDef(_data.type)) {
        log("Calling job 'Trigger " + _data.type + "' (for " + _host + ")...")
        res = $job("Trigger " + _data.type, request)
      } else {
        log("Calling job 'Trigger " + _host + "'...")
        res = $job("Trigger " + _host, request)
      }

      // Process trigger result
      if (isDef(res)) {
        if (isMap(res) && isDef(res._output)) {
          _res = server.reply(res._output.data, res._output.status, res._output.mimetype, res._output.header)
        } else {
          _res = ow.server.httpd.reply(res)
        }
      } else {
        _res = ow.server.httpd.reply(" ")
      }
    } catch(e) {
      logErr("Problem with 'Trigger " + String(request.header.host).toLowerCase() + "': " + e)
      _res = ow.server.httpd.reply(request)
    }

    return _res
    
- Prepare nginx config
- Start nginx

ojob:
  opacks      :
  - openaf: 20240812
  - oJob-common
  - Kube
  catch       : printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: true   # to change when finished
  argsFromEnvs: true
  channels    :
    create:
    - name: sites

include: 
- oJobHTTPd.yaml

jobsInclude:
- triggers.yaml

jobs:
# ---------------------------
- name : Prepare nginx config
  check:
    in:
      sites: isString
  exec : |
    // Read template
    var tmpl = io.readFileString("nginx.conf.hbs")

    // Sites data can be described in SLON or JSON
    var data = { sites: af.fromJSSLON(args.sites) }

    // Verify data
    if (isArray(data.sites)) {
      data.sites.forEach(s => {
        _$(s.name, "name in " + af.toSLON(s)).isString().$_()
        _$(s.source, "source in " + af.toSLON(s)).isString().$_()
        _$(s.target, "target in " + af.toSLON(s)).$_()
        if (isArray(s.target)) {
          s.target.forEach(st => {
            _$(st.path, "path element of target in " + af.toSLON(st)).isString().$_()
            _$(st.to  , "to element of target in " + af.toSLON(st)).isString().$_()
          })
        } else if (!isString(s.target)) {
          throw "target should be either a string or an array of maps (with 'path' and 'to')"
        } else {
          s.target = [ { path: '/', to: s.target, rewrite: false } ]
        }
        s.target.forEach((t, i) => t.i = i)
      })
    } else {
      throw "sites needs to be an array"
    }

    // Store data globally
    $ch("sites").setAll(["source"], data.sites)

    // Write nginx configuration
    io.writeFileString("/etc/nginx/http.d/default.conf", $t(tmpl, data))

# ------------------
- name : Start nginx 
  deps : Prepare nginx config
  exec : |
    $sh(["nginx", "-g", "daemon off;"])
    .exec()
